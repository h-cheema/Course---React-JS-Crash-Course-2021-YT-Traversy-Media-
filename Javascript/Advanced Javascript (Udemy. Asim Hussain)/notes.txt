Section 2: Basics (19min)

    4. What is JavaScript and how does it change?
    - Ecma tc39 is committee that decides javascript's specifications.
    - Anyone can make a proposal for tc39 on github.
        - That proposal goes through stages of acceptance.
    - ECMAScript goes by version. ES6 is also ES2015.
    - "caniuse.com" shows which browsers suppoert which features.
    - Js is 100% backwards compatible. Modern code will always work in the future.
    - You should know how the old features that the new ones are built on work.
    
    5. What is compilations vs polyfilling?
    - Compile new code into primitive code for older browsers. ex: babel.
    - Polyfill includes a file that is used in old browser to be used.

    6. What is "use strict" and what does it do?
    > Strict mode -> strict operating context.
        - makes debugging easier.
        - put "use strict" string at top of the file to use it.
        - putting "use strict" at top of function impl makes it strict mode 
        - Variables must be declared with keyword. 
            - Prevents spelling mistakes when reassigning values.
            - Prevents globals
        - Does not let you delete functions or args for functions.
        - Does not let eval("var a = 1") leak variable a.

    7. Does javascript pass variables by reference or by value?
    - Prims are passed by value. Objects are passed by reference.
        - Cannot change passed value in outer scope.

    8. What are the rest operators?
    - Js functions ignore extra parameters by default
    - Within a function, there is a collection/structure (not an array) of all arguements called "arguements".
        - func(1,2,3) {Array.prototype.slice.call(arguements, 1);} was work around before.
    - "function(...options){}" options is an array.
        - "function(arg, ...options){}" arg is first arguement, options has the rest of args (rest operator).
    
    9. What is the spread operator?
    - "var ar1 = [4,5,6];"
    - "var ar2 = [1,2,3, ...ar1];" adds each element.
    - Better than adding array directly as an element (becomes MD array).
    - console.log(method, ...opts) opts array spreads out individual vars.
    - USE CASES: copying arrays, manipulating arrays, explode arguements into a func that takes mult args
    
    10. What are template strings?
    - `string` includes literally everything, even new lines.
    - `${name}` prints name var
    - Makes code easier to understand.
    - `${1 + 4}`; will do math.
    - `${condition ? runTrue : runFalse}`

    11. What are template string tags?
    - example: console.log(h1`hello ${placeVar} my name is ${nameVar}`);


Section 3: Types & Equality (22min)

    13. What are the different types in JavaScript?
    - dynamically typed (liked js) variables types are determined at runtime
        - quick development
    - statically typed (like java) variables types are determined at compile time
        - catch errors before compiling
    - js engine uses "undefined" for either uninitialized var, missing parameter, unknown property from a list
        - only js engine sets "undefined" but never "null"
        - only a programmer sets "null" but never "undefined"
        - "undefined" is a type
        - undefined == null = true because value is the same. type is not, so undefined === null = false
        - null's type is null but js incorrectly reports it as type "object"
    
    14. What is the difference between == and ===?
    - == means equality (checks value)
        - js tries to convert values to same type, like 0 and '0'. both convert to 0.
            - called "type coercion" (the rules for this are very specific and hard to remember)
            >> equality table https://dorey.github.io/JavaScript-Equality-Table/
    - === means strict equality (checks type and value)
        - always returns false if type is different. both type and value need to be same.

    15. What is NaN and how can we check for it?
    - NaN is of type number
    - Results in a number that isn't a valid number
    - NaN == NaN = false. 1 == NaN = false.
    - isNaN(1) = false. isNaN("1") = false. isNaN("A") = true.
        - implicit coercion
    - How to check for NaN: Check equality to itself with ==
    - NaN == to anything is always false, even NaN == NaN


Section 4: Scopes & Variables (38min)

    16. Hello Scopes & Variables - NEW
    - Scope: lifetime of a variable

    17. What are the different scopes in JavaScript? - NEW
    >> Check 17.scopes.js

    18. What is variable hoisting?
    >> Check 18.hoisting.js
    - Automatic hoisting of the declared variables/functions to the top of the file.

    19. What is the scope chain?
    - A function searches parent scopes until global.
    - Defined by how program is physically written in the file.
        - Code is defined in order of declaration (lexically)
    
    20. What is an IIFE and why might you use it?
    - Immediately Invoked Function Expression
    - (function(){})(); is called right away.

    *21. What are function closures?


Section 5: Destructuring & Looping (21min)
    - foreach - cannot use break; or continue;
    - for (let index in array){} - index = literal index
    - forof - for (const value of array) - made specifically for array values.


Section 6: This (46min)
    25. Hello This
    - very important in interviews and programming
    26. What does the this keyword mean?
    - console.log(this) in inspector returns the window.
    - "this" is determined by the calling context (how a function is called)
    - "use strict" in things like functions can help prevent calling context confusion.
        - stops default this object from being the global object.
            - prevents unwanted/unexpected behaviour
    - var self = this; 
    *27. What do the functions call, bind and apply do?
    - in js, functions are objects wih properties, which are also functions.
    - function a(){} - a.name = "a" in inspector.
        -  you can add properties to functions too, like a.moo = 1
    - *a.call();
        - funcName.call() stabalizes the value of "this" in the function.
        - a.call(this/null, ...params)
    - a.apply(this/null, array);
    - bind()
        - at function assignment, we can set what we want "this" to be
        - func(){}.bind(1);
        - only works with functions expressions. (var a = function(){}.bind())
    28. What is a fat arrow function?
    - Functions can be passed around like variables, even as parameters.
        - Called "First Class Function"
        - function(function(){}) 
            - Replaced with a "function expression" - function(() => {})
            - let add = (a,b) => a+b; (no need for "return" or cbrackets)
    - solves the stability of "this"


Section 7: Object Orientation (1hr 24min)

    30. What is the prototype chain?
    - Every obj has a prototype
        - Works similar to single inheritance

    32. What is the Constructor OO pattern? (part 1)
    - ES5 has no classes, but >ES6 does
    - people incorrectly call pseudo-classical inheritance just classical inheritance
    - should always be using "use strict"
    - objects have "__proto__" and functions have "prototype" property.
    - member functions of a class should be added to proto
    

Section 8: Asynchronous Programming (1hr 3min)

    36. Hello Asynchronous Programming
    - Allows JS to be really fast yet can be created quickly.

    37. What is a callback?
    - A func that gets passed into a func and gets called in that func.
    - Callbacks themselves are not asynchronous. 
    - Only by splitting up execution with things like SetTimeout() makes it asynchronous.
    - Handling errors: Error First Callback (main.html)
    - You don't always know when async functions get called based on call order.

    38. What is callback hell?
    - "Callback Hell": Deeply nested callback functions.
        - Chaining callbacks together so they happen one after the other.
        - Often results in bugs because it's hard to manage the tracebacks.

    39. What are promises?
    - Became part of js in ES6.
    - Have been around in other languages for a long time.
    - You can attach a .then() handler to a promise but not callbacks.
        - Promises are always and truely async by default.
        - Callbacks are not async by default.

    40. How do you chain promises together?
    - if an error is thrown in the promise body or a .then(), reject is called for you.

    41. What does the Promise.all function do?
    - Lets you do several things while waiting for things like downloading things.

    *42. What is async/await and how is it different from promises?
    - ES8 introduced await.
    - Good but has downsides.
    - Async await vs promises.
        - await waits for a value before moving on.
        - await converts non blocking code into blocking code.
        - await converts sync to async code.
        - await is bad for performance.
    - There should be a good balane of await and promises.
    - "async function(){}" async alone does nothing. It must be paired with await().


Section 9: Networking (30min)

    43. What is CORS?
    - Opens rules so you can access servers from different origins.
    - GET
        - It's the response that is blocked by js. Request going out does not.
    - Server can be configured to allow certain response methods like PUT and GET.
    - To make CORS work, you must cordinate with the server side. Client side can't do anything.
    - Access Control Allow Header must either: *, the origin request domain, (options must allow these: for puts, post, delete).

    44. 18. What is JSONP?
    - Predates CORS standard.
    - Created as a pesduo standard way to retrieve data form a domain.
    - Has limitations: Only works with GET (not put, post or delete)
    - Has many uses for things like weather services through simple get requests.





Section 10: Events (13min)
Section 11: Bonus (1min) 