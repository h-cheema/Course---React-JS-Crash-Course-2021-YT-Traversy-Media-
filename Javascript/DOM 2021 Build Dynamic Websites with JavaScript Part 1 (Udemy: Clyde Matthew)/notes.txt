Section 1: Introduction (55m)
    3.
    - everything in the browswer is an object
    - "Document object" has properties and methods. easily accessible
    5.
    - each tab has its own window instance/object
    - type "window" in browser console to get window obj
        - history - object had methods like back, forward, go for tab
    - window obj -> document obj
        - window.document
    - browser creates a model from the http response
    - console.log() - console log out as a string
    - console.dir() - object input, json tree printout
    6.
    - "document.forms" in the console will show forms on the page
    - window -> document -> html -> all the html objects
    7.
    - BOM - browser object model - lets js communicate with the browser
        - navigator, screen, location, history, etc
        - no standards for BOM (compared to something like ecma)
    8.
    - DOM was designed to be language independant
        - could use something like python to manipulate DOM
    - XML structures content
    9.
    - DOM is an interface for valid HTML documents
    - What the DOM is not:
        - HMTL
            - Errors
                - DOM will add elements to make invalid HTML valid
                    - will add body object if no html body tag at all
                - DOM will add closing tags if they are not there
            - JavaScript
        - not what you see in the browser
            - ex: "display:none;" object still exists, just invisible
        - DevTools
    12.
    - pseudo elements are used to style an element
        - added to the selector
        - ex: "p::first-line {color:'red';}"
    15.
    - pseudo elements are not part of the DOM


Section 2: Bonus Section - JavaScript vs DOM (22m)
    - there are many javascript engines out there. chrome uses "v8"
    - JS uses DOM API to interact with the DOM
    - JS is used in: 
        - browsers - manipulating the DOM
        - backend - things like Node.js
        - databases - example: mongoDB
    - getElementByID and setTimeout are DOM functions, not JS itself
    - DOM was not designed specifically for JS
    - DOM is like bricks, JS is like glue


Section 3: Accessing the DOM (1hr 21m)
    27.
    - each browser has their own DOM modifications
    - document is the root of our webpage
    - "console.dir(document)" returns document object
    - every node has a prototype
    29.
    - HTML
        - DOM often refered to as DOM tree with many nodes (tags are elements and are nodes)
        - everything is basically node
    * querySelector()
    32.
    - document.getElementById() 
        - was the only way to access DOM before
        - returns an element node
    34.
    - document.getElementByID() can only get one element at a time
    - getElementsByClassName() returns a collection, not an array
    40.
    - getElementsByTagName()
        - can be performance heavy
        - returns live HTMLCollection, not strictly an array
    41.
    - querySelector is the newer way of accessing the DOM
    - a query element is a node


Section 4: Nodes (42m)
    49.
    - Every item on the DOM tree is a node
    - nodes can conatin html tags
    50.
    - newlines and spaces in the HTML are valid characters and are part of the DOM
    - all content must be inside the body tag
    53.
    - The document object is a node
    54.
    - Types of active/relevant nodes (in image notes)
    - Common Nodes:
        - Document nodes
        - Element nodes
        - Text nodes
        - Comment nodes
    56.
    - Each node as a node type and a node value
    - Family dynamics:
        - parents, children and siblings
        - parents can be singlings or children and so on.
    58.
    - nodeName: <p> will return P
        - nodeName always returns capital string
        - does not give other info like attributes. name of node only.
        - tagName is only for tags. nodeName is for any node type.
    59.
    - NodeList vs HTMLCollection
        - both are collections of DOM nodes
        - NodeList can contain any type of node
            - accessed only by node id
        - HTMLCollection can only contain elements
            - accessed by name, id or index number
        HTMLC = live, NL = static


Section 5: Traversing the DOM (1hr 8m)
    65.
    - Getting parent node: "parentNode" and "parentElement"
    - "Child" is directly under parent
    - "Descendants" are multiple levels below parent
    - "Siblings" do not have to be the same type but do have to be same level
    69.
    - global properties (well known) - window, document, html.
    72.
    - "element.nextSibling" - includes returns and text
    - "element.previousSibling", "element.previousElementSibling"
    - "element.nextElementSibling" - only html elements
    73.
    - "element.firstChild"
    - "element.lastChild"
    - "element.children[0]"
    74.
    - "<h1>Welcome</h1>" .firstChild and .lastChild return the text.
        - .children[0] returns elements only. returns undefined.
        -
    75.
    - child element can only have one parent
    - childNodes returns node collection
    - children returns HTMLCollection






Section 6: Creating, Removing and Cloning DOM Elements (1hr 6m)












Section 7: Where to next? (4m)