DOM 2021 Build Dynamic Websites with JavaScript Part 2

Section 1: Introduction to Events - hr 4min

    1. Introduction - what is an event
    - An event is an action a user or browser has taken.
        - hover over an element.
        - clicking a button.
        - submitting a form.
        - page finishes loading.
    - Events take place in the browser itself, given to use by the DOM API. 
    - Events are not unique to JS
    - DOM changes in the console are only temporary. Refreshes removes changes.
    
    3. The 2 most important things when it comes to events
    - A) Event listeners:
        - Responsive interface to a listener on an element.
        - three types of event listeners.
            - inline event listener.
            - inline properties.
            - event listeners.
    - B) Event handlers:
        - every event needs a handler.
        - Listeners listen for an event firing.
        - Handlers respond to fired event.
    - There are many different types of events.

    5. Inline Event Listeners - brief introduction
    - boom() is an inline listener here: <button onclick="boom()"></button>

    6. Do we need to wrap our attribute values in quotation marks?
    - Some attributes dont need quotation marks.
        - Quotations only needed when there are spaces, special characters: ` ' " < > =
    
    10. Summary - the 3 ways to add an event listener to HTML elements
    - All ways to add event listeners work. 
    - 1. inline html: <button onclick="handleEvent()" />
    - 2. js: button.onclick = () => {}
    - 3. addEventListener() is the best way for organization and capabilities.

    14. Inline Event Listeners - detailed overview
    - Inline event listeners are undesirable.
        - You should separate your html from JS.
        - If you have 100 buttons you have to change 100 elements manually.
        - More maintainable to use script listeners.

    17. Inline Event Listeners - TEST solution (part 3 of 3)
    - onclick="handle()"
        - onclick = listener
        - handle() = handler

    18. Inline Properties - detailed overview
    - Event listeners are properties attached html elements.

    23. addEventListener() method - detailed overview
    - addEventListener() is from the DOM API, not js.
        - Default APIs: Fetch(), Websockets, File System, History API
    - element.addEventListener(event, callback)

    29. EXTRA lecture - 3 ways to define a color
    - how do we set colors?
        - by keyword: like red, white, blue. 140 total names. little felxibility
        - HSL system: hue, saturation, lightness, alpha
        - RGB: can be defined with hex or functional notation (rgb())

    30. EXTRA lecture - digits, bytes and hexadecimal format
    - RGB system: hexidecimal
        - (B)inary dig(IT) - shortened to BIT.
    - Byte = 8 bits (max 255 bits).
    - HDR is higher range of colors.
    - Rounding random with math.floor

    32. EXTRA lecture - toString() method
    - num.toString(radix)
        - radix is the number base to return. bin = 2, hex = 16, dec = 10.

    33. What I didn't mention
    - toString() is available for basically everything.
    - toString on a number returns the a specific radix instead of inheriting form the proto object's toString().


Section 2: Different types of events - 55min

    39. Event types
    - All events inherit from the event object.
    - Each event is unique with its own properties and methods.
    - Most common events: touch, form, keyboard, window, mouse.
    
    41. Keydown event - example
    - Each event has it's own unique set of properties.

    46. How to find forms and its default behavior
    - Submit is fired on the form when clicked, not on the button.

    47. Input event, focus event and copy/paste events
    - let nameText = document.querySelector('input[type=text]');
        - getting an element with specific attribute value
    - nameText.addEventListener('copy', () => {}
        - event listens for copy like ctrl+c
    
    48. Touch and Window events
    - Touch is not supported on all phones.


Section 4: Object and node hierarchy - 52min

    61. JS objects vs DOM objects in the console
    - Prototype is baiscally a parent to inherit from.
    - Object types:
        - JS objects = native objects.
        - Broswer objects = host objects.

    62. Advanced topic (Native vs Host)
    - Every object and node has the prototype property
    - A node is a generic term for any object in the DOM
    - Object types:
        - Native
            - core predefined objects in ECMA
            - Object, Function, String, etc...
        - Host
            - Specific env for specific purpose
            - Not defined in ECMA
            - Not all envs have the same host obj
            - Node.js host objs: HTTP, HTTPS, URL, etc...
            - Browser host objs: window, document, history, etc...
    - window obj
        - Let's us access DOM, BOM, JS.
        - root obj, given to us by the browser.
    - DOM vs BOM
        - Both are host objs given to use by the broswer.
        - DOM is governed by W3C.
        - BOM covers view rather than content.
    
    66. Element node - object hierarchy
    - Prototype of Object is null.
    - In the browser, DOM objs are also JS objs, but not vice versa.
    - Object hierarchy
        - EventTarget: A DOM interface. Is the root obj. Lets all nodes to use events.
        - Node: General node properties. 
            - DOM traversal. Methods like parentNode, childNodes, etc... Many elements inherit from Node.
        - Element: Traveses only DOM elements. nextElementSibling, children, querySelector.
        - HTMLElement: Available to any HTML element on page.
        - HTMLParagraphElement: Each tag inherits from its own HTML...Element. Like HTMLAnchorElement.
        - DOM Object <p></p>:

    68. What is DOM extension?
    - DOM objects are host objects that inherit from the DOM interface.

    71. The problems with DOM extensions are ...
    - Prototype specific. Unavailable to other node objects.
    - Can interfere with other already defined DOM objects.


Section 5: Capturing and Bubbling - 35min

    72. Section introduction
    - Event handlers can be nested and will bubble all the way up to the DOM object. 
    - Tree of event handlers all fire starting from the last child.

    74. The 2 phases of an event - capturing & bubbling

        - Click events do not originate at the element they are linked to.
        - All events originate at the root object, which is the Window object.
        
        - When a event is fired, the event makes its way through the nodes from the window object to the event.
            - The event notifies each node.
            - Once it reaches the target, it traces its steps back up to the root and notifies each node of the event.

        - Phase 1 = event capturing
        - Phase 2 = event bubbling

    75. How to listen to an event during the capturing phase

        - element.addEventListener('click', clickHandler, true)
        - true = listen to event on capture phase.
        - two true args = bubbling phase.

    78. Who cares about capturing vs bubbling?

        - When working with nested menus.
        - When working with third party libs.
        - When overriding and you need to listen only to a certain phase.

    79. How to stop event capturing and event bubbling?

        - stopPropagation() will stop bubbling and phasing at a specific node.
        - 

    80. Example of stopPropagation()
        - e.stopPropagation() stops the event of e.
        - e.stopImmeadiatePropagation() stops all events that capture to e and bubble up from e.
        

Section 6: Event Delegation and Challenges - 1hr 1min

    81. Event Delegation Introduction
    - Choosing common ancestor and rely on bubbling instead of adding events on every item.
    - You can access the event object and make changes to children within in.

    85. What is the classList property?
    - classList is an API which returns a DOMTokenList.
    - Good for modifying css tags. Add, remove, contains and value.
    - Returns a list that has the functions above ^.

    86. Box Challenge - perfecting our solution
    - 

    87. Summary of the box challenge
    - 

    88. Quote Challenge - intro
    - 

    89. Quote Challenge - build
    - 

    90. Quote Challenge - solution
    - 

    91. parentNode vs parentElement
    - 

    92. List Challenge - intro
    - 

    93. List Challenge - build
    - 

    94. List Challenge - solution
    - 

    95. tagName property - why all CAPS?
    - 


Section 7: Website Project - A Shopping List - 3hr 20min
Section 8: Outro - 3min