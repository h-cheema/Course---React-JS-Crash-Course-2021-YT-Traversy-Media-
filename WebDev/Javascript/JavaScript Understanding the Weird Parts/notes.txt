JavaScript: Understanding the Weird Parts
git commit -am "JavaScript UTWP - Finished lecture /85"



Section 1: Getting Started - 15min

    1. Introduction and The Goal of This Course
    - js is nothing like other similar looking languages, such as java or c++
        - js is a different paradigm than those languages.
    - js is deceptively powerful and beautiful.
    - Philosophy: Don't immitate. Understand.
        - Don't immitate js code.
        - Immitation -> When you have to debug or make code from scratch, you will have major problems.
    
    5. Understanding, Frameworks, and The Weird Parts
    - When you learn js through JQuery and Node, you don't get a deep understanding of js.
    - You should build a very strong core js skillset first.
    - Understanding weird parts = Understanding the hows and whys.

Section 2: Execution Contexts and Lexical Environments - 1hr 34min

    6. Conceptual Aside: Syntax Parsers, Execution Contexts, and Lexical Environments
    - Syntax parser
        -Translates syntax to computer instructions.
        - Parser can do extra stuff to translation.
    - Lexical Environment 
        - Where it's written and what surrounds it.
        - Where the code physically sits in memory.
    - Execution Context
        - Wrapper helps manage the running code.
        - Can do beyond what your code does.
    
    7. Conceptual Aside: Name/Value Pairs and Objects
    - Name can be defined many times but can only have one value. (Exe context)
    - Object: Collection of name value pairs.
        - value of a name could be another object. This can nest downwards.
    
    9. The Global Environment and The Global Object
    - js engine creates a "global object" and "this" when you run code.
    - Global: means not inside a function.
    - js wraps your code in the execution context

    11. Conceptual Aside: Javascript and 'undefined'
    - === is safer than ==
    - Uncaught ReferenceError = Thing is not in memory at all.
    - Undefined = a special value initially set by JS. Undefined != null.
        - var a; 
            - Always better to let js handle it like this.
            - This way you know if something is unintentionally undefined.
        - var a - undefined;
            - Manual way to set undefined. Hard to know if you or js set it.
            - Harder to know if you made something undefined.

    13. Conceptual Aside: Single Threaded, Synchronous Execution
    - Single threaded: One command is executed at a time.
    - Synchronous execution: One at a time, and in order.

    15. Functions, Context, and Variable Environments
    - A scope is an execution context.

    17. Scope, ES6, and let
    - let
        - Can be used instead of var.
        - Uses block scoping.

    18. What About Asynchronous Callbacks?
    - Whats happens inside the JS engine is specifically synchronous.
    - What happens outside the engine can be asynchronous.

Section 3: Types and Operators - 1hr 18min

    19. Conceptual Aside: Types and Javascript
    - JS is dynamically typed.

    20. Primitive Types
    - Primitives represent a single value, not an object.
    - object = collection of key value pairs.
    - Undefined = lack of existence and code did not set a value (programmer should not assign this).
    - null = variable is equal to nothing (set by programmer).
    - number = float
    - string = sequence of characters. In js a string is a prim type.
    - symbol = value is kept private for internal use.

    21. Conceptual Aside: Operators
    - 3 + 4 = infix notation.
    - + 3 4 = prefix notation.
    - 3 4 + = profix notation.
    - console.log(+(3,4)) = valid js.

    22. Operator Precedence and Associativity
    - Means which operator gets called first
    - Associativity = left to right or right to left
    - a = b is a function that returns a value (value to the right)

    23. Operator Precedence and Associativity Table
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

    24. Conceptual Aside: Coercion
    - Means converting a value from one type to another type.
    - Coercion happens behind the scenes, like 1 + '2' will become '12'.

    25. Comparison Operators
    - Number(x) = check what x coerces to.
    - Coercion can cause unexpected results that cause very tricky bugs.
    - Number(undefined) = NaN.
    - Number(null) = 0.
    - === will help prevent unexpectedly coerced comparison. 
        - false == 0 = true
        - false === 0 = false
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness

    27. Existence and Booleans
    - Coercion can be used to our advantage.

    28. Default Values
    - undefined || 'hello' = 'hello'
    - || returns the first value that can be coerced into true.

    29. Framework Aside: Default Values
    - <script> stacked on top of one another all get merged downwards


Section 4: Objects and Functions

    30. Objects and the Dot (15min)
        - Accessing objects is similar to lua
            - person['greeting'] = 'hello'
                - person.greeting is 'hello'
        - Left to right dot operator = associative operator


    31. Objects and Object Literals (11min)
        - var person = {} is a literal, like lua.


    32. Framework Aside: Faking Namespaces (8min)
        - Namespaces can be made with objects.


    33. JSON and Object Literals (7min)
        - JS object notation is inspired by JSON
        - Early on, data was stored as XML.
            - This made data far larger than needed because of XML tags.
            - JS object notation was much more efficient.
        - In JSON, properties must be wrapped in quotes.
        - Anything valid in JSON is valid in JS, but not vice versa.
        - JS has built in functions to work with JSON.
            -> JSON.stringify(objectLiteral);
        

    34. Functions are Objects (8min)
        - Functions are objects in js.
        - First Class Functions: Anything you can do with a variable you can do with a function.
        - You can attach variables and other functions to functions.
        - Unamed functions are called anonymous functions.


    35. Function Statements and Function Expressions (21min)
        - Expression is a unit of code that results in a value.
            -> 1 + 2
            -> a = 3 // = returns a value.
            -> if (a === 2)
                - if is a statement, a===2 is an expression.
        - function greet() // Hoists function. Can be called before declaration.\
        - var greet = function() // Set to undefined before being assigned its function value.
            - Cannot be called before declaration.
        - passing functions in parameters is part of functional programming.


    36. Conceptual Aside: By Value vs By Reference (16min)
        - All objects are passed by reference.
        - Mutate: Can be changed.
            - Immutable = Cannot be changed.


    37. Objects, Functions, and 'this' (21min)
        - 'this' refers to something different based on where a function is called.
        - a var funciton inside an obj function will point to Window instead of the obj.
        -> var self = this
            - Can be used to keep this consistent at the top scope of a object.


    38. Conceptual Aside: Arrays - Collections of Anything (6min)    
        - Arrays can hold functions.


    39. 'arguments' and spread (12min)
        - arguements = parameters.
        - keyword arguements is a special keyword in js
        - func params work left to right.
        - arguments will be deprecated soon and replaced with spread.


    41. Conceptual Aside: Syntax Parsers (2min)    
        - Syntax parser goes through code character by character to check if the code follows rules.
        - It can add code, like a semicolon where one is expected.


    42. Dangerous Aside: Automatic Semicolon Insertion (6min)    
        - Js engine knows what the syntax should look like.
        - It sees a newline char and says you can't go to next line yet, so it puts a semicolon.
        - Auto insert semicolons can cause big problems in your code.
        - Always put semicolons where needed.


    43. Framework Aside: Whitespace (4min)    
        - JS allows a lot of whitespaces
        - You can make code more readable with white space.


    44. Immediately Invoked Functions Expressions (IIFEs) (17min)    
        - JS sees everything in parentheses as an expression
            ->(function(name) {return 'Hello ' + name;}('John'));
                - Classic IIFE. Invokes a function expression.
                - Function wrapped in curly braces is not an expression like (1+2) and returns something.
                - Expression is processed during runtime.
        - Almost every major framework/lib uses IIFEs


    45. Framework Aside: IIFEs and Safe Code (8min)    
        - IIFEs sit inside their own execution context and not in the global execution context.
            - This is what makes IIFEs so useful.
        - Helps to make code reuseable and separate from the global execution context.
        - You can pass in the window obj to affect the global exe context.


    46. Understanding Closures (11min)
        - Closures are created by js engine.
        - Closures ensure that variables can be found in the scope chain
            - even after a function is popped off of the stack.


    47. Understanding Closures - Part 2 (19min)
        - Outer variable / free variable is an var you have access to outside of a function.
        - You can use IIFEs to make temporary execution contexts where needed.
            When returning a function, you can use IIFE to hold a var you need in its return value.


    48. Framework Aside: Function Factories (12min)
        - 


    49. Closures and Callbacks (8min)    
        - 


    50. call(), apply(), and bind()  (21min))    
        - 


    51. Functional (Programming) (20min)    
        - 


    52. Functional Programming - Part 2 (8min)    
        - 



Section 5: Object-Oriented Javascript and Prototypal Inheritance (40min)

    53. Conceptual Aside: Classical vs Prototypal Inheritance (5min)
    - 

    54. Understanding the Prototype (14min)
    - 

    55. Everything is an Object (or a primitive) (6min)
    - 

    56. Reflection and Extend (15min)
    - 


Section 6: Building Objects (7min)

    57. Function Constructors, 'new', and the History of Javascript (16min)
    - 

    58. Function Constructors and '.prototype' (10min)
    - 

    59. Dangerous Aside: 'new' and functions (4min)
    - 

    60. Conceptual Aside: Built-In Function Constructors (11min)
    - 

    61. Dangerous Aside: Built-In Function Constructors (4min)
    - 

    62. Dangerous Aside: Arrays and for..in (3min)
    - 

    63. Object.create and Pure Prototypal Inheritance (13min)
    - 

    64. ES6 and Classes (6min)
    - 

Section 7: Odds and Ends (19min)

    65. Initialization (6min)
    - 

    66. 'typeof' , 'instanceof', and Figuring Out What Something Is (7min)
    - 

    67. Strict Mode (6min)
    - 

    68. Strict Mode Reference (1min)
    - 

Section 8: Examining Famous Frameworks and Libraries (52min)

    69. Learning From Other's Good Code (4min)
    - 

    70. Deep Dive into Source Code: jQuery - Part 1 (22min)
    - 

    71. Deep Dive into Source Code: jQuery - Part 2 (16min)
    - 

    72. Deep Dive into Source Code: jQuery - Part 3 (11min)
    - 

Section 9: Let's Build a Framework / Library! (49min)

    73. Requirements (3min)
    - 

    74. Structuring Safe Code (3min)
    - 

    75. Our Object and Its Prototype (9min)
    - 

    76. Properties and Chainable Methods (17min)
    - 

    77. Adding jQuery Support (5min)
    - 

    78. Good Commenting (2min)
    - 

    79. Let's Use Our Framework (8min)
    - 

    80. A Side Note (1min)
    - 

Section 10: BONUS Lectures (5min)

    81. TypeScript, ES6, and Transpiled Languages (5min)
    - 

    82. Transpiled Languages References (1min)
    - 

Section 11: BONUS: Getting Ready for ECMAScript 6 (1min)

    83. Existing and (Upcoming) Features (1min)
    - 

    84. ES6 Features Reference (1min)
    - 

Section 12: Conclusion (1min)

    85. Learning to Love the Weird Parts (1min)
    - 
