{"ast":null,"code":"var _jsxFileName = \"/home/hc/React/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // Fetch Tasks\n\n  const fetchTasks = async id => {\n    const res = await fetch(`http://localhost:5000/tasks`);\n    const data = await res.json();\n    return data;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; // Delete task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Toggle Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask,\n            showAddTask: showAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 34\n          }, this) : 'No Tasks To Show']\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hc/React/react-task-tracker/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Header","Footer","Tasks","AddTask","About","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","id","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","map","reminder","props","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA8C,kBAA9C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMc,QAAQ,GAAG,YAAY;AAC3B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACD,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT,CALgB,CAgBhB;;AACA,QAAME,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,6BAAF,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAjBgB,CAuBhB;;;AACA,QAAME,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAE9B,UAAML,GAAG,GAAG,MAAMC,KAAK,CACrB,6BADqB,EAErB;AACEK,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AALR,KAFqB,CAAvB;AAUE,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAR,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,IAAX,CAAD,CAAR;AACH,GAdD,CAxBgB,CAyChB;;;AACA,QAAMS,UAAU,GAAG,MAAOZ,EAAP,IAAc;AAC/B,UAAME,KAAK,CAAE,+BAA8BF,EAAG,EAAnC,EACX;AAACO,MAAAA,MAAM,EAAE;AAAT,KADW,CAAX;AAGAX,IAAAA,QAAQ,CAACD,KAAK,CAACkB,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GALD,CA1CgB,CAkDhB;;;AACA,QAAMc,cAAc,GAAId,EAAD,IAAQ;AAC7BJ,IAAAA,QAAQ,CACND,KAAK,CAACoB,GAAN,CAAWT,IAAD,IACRA,IAAI,CAACN,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGM,IAAJ;AAAUU,MAAAA,QAAQ,EACjC,CAACV,IAAI,CAACU;AADS,KAAjB,GAEIV,IAHN,CADM,CAAR;AAOD,GARD;;AAUA,sBACE,QAAC,MAAD;AAAA,2BAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,MAAMZ,cAAc,CAAE,CAACD,WAAH,CAAnC;AAAoD,QAAA,OAAO,EAAEA;AAA7D;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,MAAM,EAAGwB,KAAD,iBAE5B;AAAA,qBACGxB,WAAW,iBAAI,QAAC,OAAD;AAAS,YAAA,KAAK,EAAEY,OAAhB;AAAyB,YAAA,WAAW,EAAEZ;AAAtC;AAAA;AAAA;AAAA;AAAA,kBADlB,EAGGE,KAAK,CAACuB,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AAAO,YAAA,KAAK,EAAEvB,KAAd;AAAqB,YAAA,QAAQ,EAAEiB,UAA/B;AAA2C,YAAA,QAAQ,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,kBAApB,GAAgG,kBAHnG;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAHF,eAaE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAEvB;AAAhC;AAAA;AAAA;AAAA;AAAA,cAbF,eAeE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CArFD;;GAAMC,G;;KAAAA,G;AAwFN,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport About from './components/About'\n\n\nconst App = () => {\n\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n\n  // Fetch Tasks\n  const fetchTasks = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks`)\n    const data = await res.json()\n    return data\n  }\n\n  // Add Task\n  const addTask = async (task) => {\n\n    const res = await fetch(\n      'http://localhost:5000/tasks', \n      {\n        method: 'POST',\n        headers: {\n        'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      })\n\n      const data = await res.json()\n      setTasks([...tasks, data])\n  }\n\n\n  // Delete task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, \n    {method: 'DELETE'})\n\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n\n  // Toggle Reminder\n  const toggleReminder = (id) => {\n    setTasks(\n      tasks.map((task) => \n        task.id === id ? {...task, reminder :\n          !task.reminder \n        } : task\n      )\n    )\n  }\n\n  return (\n    <Router>\n\n      <div className='container'>\n        <Header onAdd={() => setShowAddTask (!showAddTask)} showAdd={showAddTask}/>\n\n        <Route path='/' exact render={(props) => (\n\n          <>\n            {showAddTask && <AddTask onAdd={addTask} showAddTask={showAddTask} />}\n\n            {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />) : ('No Tasks To Show')}\n          </>\n\n        )} />\n\n        <Route path='/about' component={About} />\n\n        <Footer/>\n\n      </div>\n\n    </Router>\n  )\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}